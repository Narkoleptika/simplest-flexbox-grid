// Global variables:
// Unitless, interpreted as pixels
_fg_gutter ?= 24  // gutter between columns. Set as desired.
_fg_padding ?= 12  // padding for column boxes. Set as desired, can override for individual columns.

// *** Main mixin to create a per-row layout *** //
_fg(colList, gutter = _fg_gutter, padding = _fg_padding)
    if length(colList) > 1
        // Count how many columns there are altogether
        columnCount = 0
        for c, i in colList
            columnCount += c

        _fg_grid(columnCount, gutter, padding)

        for c, i in colList // set child items widths using nth:child()
            & > :nth-child({length(colList)}n + {i + 1})
                _fg_width(c / columnCount, gutter)
    else // call _fg_grid() directly
        _fg_grid(colList, gutter, padding)


// *** Set up grid with equal width columns *** //
_fg_grid(cols = 0, gutter = _fg_gutter, padding = _fg_padding)
    box-sizing border-box
    display flex
    flex-wrap wrap
    margin-left (-1 * gutter)px
    > *
        if padding != 0
            padding (padding)px
        margin-left (gutter)px
        box-sizing border-box
    > *
        calc_percent = (1 / cols) * 100%
        calc_gutter_allowance = (gutter)px
        width "calc(%s - %s)" % (calc_percent calc_gutter_allowance)


// *** width override for a column *** //
_fg_width(ratio, gutter = _fg_gutter)
    calc_percent = ratio * 100%
    calc_gutter = (gutter)px
    width "calc(%s - %s)" % (calc_percent calc_gutter)
